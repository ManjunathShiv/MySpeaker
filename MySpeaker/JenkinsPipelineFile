#!/usr/bin/env groovy

def teamEmailList ='manjunath.shivakumara@philips.com,manjunath.sk.85@gmail.com'
def devTeamEmailList = 'manjunath.shivakumara@philips.com'
def errors = []
def shouldSkip = false

node {
  try {
      stage('Checkout GitHub CodeBase') {
        def jobBaseName = "${env.JOB_BASE_NAME}".replace('%2F', '/')
          if (env.BRANCH_NAME != jobBaseName)
            {
              echo "ERROR: Branches DON'T MATCH"
              echo "Branchname  = " + env.BRANCH_NAME
              echo "jobBaseName = " + jobBaseName
              exit 1
            }
        echo "Branchname  = " + env.BRANCH_NAME
        checkout([$class: 'GitSCM', branches: [[name: '*/'+env.BRANCH_NAME]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'WipeWorkspace'], [$class: 'LocalBranch'], [$class: 'MessageExclusion', excludedMessage: '.*\\[skip ci\\]|\\[ci skip\\].*']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'GitHubHTTPS', url: 'https://github.com/ManjunathShiv/MySpeaker.git']]])
      }

      stage('Ensure Git Clean') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/2-Ensure-Clean-Git-Status
          sh ensure_clean_git_status.sh
          '''
      }

      stage('Should Skip CI') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/1-Skip-CI
          sh record_skip_ci_status.sh
          '''
          String skip_ci_status_file_path = "${env.WORKSPACE}/Scripts/CI-CD-Scripts/1-Skip-CI/.skip_ci.txt"
          String skip_ci_value = ((readFile(skip_ci_status_file_path)).toString()).replaceAll("\\s","")
          shouldSkip = skip_ci_value == "true" ? true : false
      }

      stage('CI Execution StartTime') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/14-Record-Time
          sh record_start_time.sh
          '''
      }

      if (env.BRANCH_NAME == 'develop') {
        stage('Ensure Git Branch') {
          sh '''#!/bin/bash -l
            cd Scripts/CI-CD-Scripts/3-Ensure-Git-Branch
            sh ensure_git_branch_for_alpha_release.sh
            '''
        }
      }

      stage('Ensure Xcode Version') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/4-Ensure-Xcode
          sh ensure_xcode_version_for_release.sh
          '''
      }

      stage('Code Coverage') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/8-Code-Coverage
          sh generate_code_coverage.sh
          '''
          if (!shouldSkip) {
            publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'Source/MySpeaker/fastlane/code_coverage', reportFiles: 'index.html', reportName: 'Code Coverage'])
          }
      }

      if (env.BRANCH_NAME == 'develop') {
        stage('Build & Create Ipa(s)') {
          sh '''#!/bin/bash -l
            cd Scripts/CI-CD-Scripts/9-Create-Ipa
            sh 1_build_and_create_ipa_for_alpha_release.sh
            '''
        }
      }

      stage('Record Execution Time') {
        sh '''#!/bin/bash -l
          cd Scripts/CI-CD-Scripts/14-Record-Time
          sh record_execution_time.sh
          '''
      }

  } catch(err) {
      errors << "errors found: ${err}"
      stage('Email Notification on Fail') {
          echo "Send Email here."
          echo errors
      }
    } finally {
          stage('Cleaning workspace') {
              step([$class: 'WsCleanup', deleteDirs: true, notFailBuild: true])
          }
    }
}
